<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Symfony\Component\Process\Process;

class DevMigrate extends Command
{
    protected $signature = 'dev:migrate {--fresh : Recr√©er la base de donn√©es} {--seed : Ex√©cuter les seeders}';
    protected $description = 'Ex√©cute les tests de base de donn√©es puis applique les migrations si les tests passent';

    public function handle()
    {
        $this->info('üöÄ D√©marrage du processus de migration...');

        // 1. Sauvegarder l'environnement actuel
        $this->info('üìù Sauvegarde de l\'environnement...');
        $currentEnv = env('APP_ENV');
        putenv('APP_ENV=testing');

        // 2. Ex√©cuter les tests
        $this->info('üß™ Ex√©cution des tests...');
        $testProcess = new Process(['php', 'artisan', 'test', '--filter=Database']);
        $testProcess->run(function ($type, $buffer) {
            $this->output->write($buffer);
        });

        // Restaurer l'environnement
        putenv("APP_ENV={$currentEnv}");

        // Si les tests √©chouent
        if (! $testProcess->isSuccessful()) {
            $this->error('‚ùå Les tests ont √©chou√©. Les migrations ne seront pas appliqu√©es.');

            return 1;
        }

        $this->info('‚úÖ Les tests sont pass√©s !');

        // 3. Demander confirmation pour la migration
        if (! $this->confirm('Voulez-vous appliquer les migrations sur la base de d√©veloppement ?', true)) {
            $this->info('üõë Migration annul√©e.');

            return 0;
        }

        // 4. Appliquer les migrations
        $this->info('üîÑ Application des migrations...');
        
        $command = ['php', 'artisan', 'migrate'];
        if ($this->option('fresh')) {
            $command[] = '--fresh';
        }
        
        $migrateProcess = new Process($command);
        $migrateProcess->run(function ($type, $buffer) {
            $this->output->write($buffer);
        });

        if (! $migrateProcess->isSuccessful()) {
            $this->error('‚ùå Erreur lors de l\'application des migrations.');

            return 1;
        }

        // 5. Ex√©cuter les seeders si demand√©
        if ($this->option('seed')) {
            $this->info('üå± Ex√©cution des seeders...');
            $seedProcess = new Process(['php', 'artisan', 'db:seed']);
            $seedProcess->run(function ($type, $buffer) {
                $this->output->write($buffer);
            });

            if (! $seedProcess->isSuccessful()) {
                $this->error('‚ùå Erreur lors de l\'ex√©cution des seeders.');

                return 1;
            }
        }

        $this->info('‚ú® Processus de migration termin√© avec succ√®s !');

        return 0;
    }
}

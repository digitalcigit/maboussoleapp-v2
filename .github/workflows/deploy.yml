name: Deploy Application

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      issues: write
      pull-requests: write
      actions: read
      checks: write
      id-token: write
    
    # Définir l'environnement en fonction de la branche
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set version
      id: version
      run: |
        VERSION=$(date '+%Y%m%d.%H%M')
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "version=v$VERSION-beta" >> $GITHUB_OUTPUT
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Deployment
      id: deployment
      uses: chrnorm/deployment-action@v2
      with:
        token: ${{ github.token }}
        environment: ${{ steps.version.outputs.environment }}
        description: 'Deploying ${{ steps.version.outputs.version }}'
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add Known Hosts
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        ssh-keyscan -H -p 5022 ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        chmod 644 ~/.ssh/known_hosts
        
    - name: Deploy Application
      id: deploy
      env:
        DEPLOY_ENV: ${{ steps.version.outputs.environment }}
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "Déploiement $VERSION vers $DEPLOY_ENV en cours..."
        # Créer le dossier de destination si nécessaire
        ssh -p 5022 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
        
        # Synchroniser les fichiers
        rsync -avz --delete -e "ssh -p 5022" \
          --exclude='.git*' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='.env' \
          ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}
        
        if [ $? -eq 0 ]; then
          echo "deploy_status=success" >> $GITHUB_OUTPUT
        else
          echo "deploy_status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Update Deployment Status
      if: always()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: ${{ steps.deploy.outputs.deploy_status == 'success' && 'success' || 'failure' }}
        
    - name: Create Release
      if: github.ref == 'refs/heads/main' && steps.deploy.outputs.deploy_status == 'success'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          Release ${{ steps.version.outputs.version }}
          
          ## Changements
          ${{ github.event.head_commit.message }}
          
          ## Commits
          https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}
        draft: false
        prerelease: false
        
    - name: Create Beta Release
      if: github.ref == 'refs/heads/develop' && steps.deploy.outputs.deploy_status == 'success'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Beta Release ${{ steps.version.outputs.version }}
        body: |
          Beta Release ${{ steps.version.outputs.version }}
          
          ## Changements
          ${{ github.event.head_commit.message }}
          
          ## Commits
          https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}
        draft: false
        prerelease: true
        
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.deploy.outputs.deploy_status == 'success' && 'success' || 'failure' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        text: |
          Déploiement ${{ steps.version.outputs.version }} vers ${{ steps.version.outputs.environment }}
          ${{ steps.deploy.outputs.deploy_status == 'success' && '✅ Succès' || '❌ Échec' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

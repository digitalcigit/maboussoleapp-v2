name: Deploy Application

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      issues: write
      pull-requests: write
      actions: read
      checks: write
      id-token: write
    
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set version
      id: version
      run: |
        VERSION=$(date '+%Y%m%d.%H%M')
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "version=v$VERSION-beta" >> $GITHUB_OUTPUT
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Deployment
      id: deployment
      uses: chrnorm/deployment-action@v2
      with:
        token: ${{ github.token }}
        environment: ${{ steps.version.outputs.environment }}
        description: 'Deploying ${{ steps.version.outputs.version }}'

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy Application
      id: deploy
      env:
        DEPLOY_ENV: ${{ steps.version.outputs.environment }}
        VERSION: ${{ steps.version.outputs.version }}
        REMOTE_USER: ${{ secrets.SERVER_USER }}
        REMOTE_HOST: ${{ secrets.SERVER_HOST }}
        REMOTE_PORT: ${{ secrets.SERVER_PORT }}
        REMOTE_BASE_DIR: ${{ secrets.DEPLOY_PATH }}
      run: |
        # Configure SSH to disable host key checking
        mkdir -p ~/.ssh
        echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
        chmod 600 ~/.ssh/config
        
        echo "Déploiement $VERSION vers $DEPLOY_ENV en cours..."
        
        # Transférer le script de déploiement
        scp -P $REMOTE_PORT scripts/deploy-production.sh $REMOTE_USER@$REMOTE_HOST:/tmp/
        
        # Exécuter le script de déploiement avec les variables d'environnement
        ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "bash -s" << 'ENDSSH'
          export REMOTE_USER='$REMOTE_USER'
          export REMOTE_HOST='$REMOTE_HOST'
          export REMOTE_PORT='$REMOTE_PORT'
          export REMOTE_BASE_DIR='$REMOTE_BASE_DIR'
          chmod +x /tmp/deploy-production.sh
          /tmp/deploy-production.sh
ENDSSH
        
        if [ $? -eq 0 ]; then
          echo "deploy_status=success" >> $GITHUB_OUTPUT
        else
          echo "deploy_status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Update Deployment Status
      if: always()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        environment-url: https://crm-app.maboussole.net
        state: ${{ steps.deploy.outputs.deploy_status == 'success' && 'success' || 'failure' }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}

    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Deployment failed: ${process.env.VERSION}`,
            body: `Deployment to ${process.env.DEPLOY_ENV} failed.\nPlease check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`
          });

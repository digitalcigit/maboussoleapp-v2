name: Deploy Application

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      issues: write
      pull-requests: write
      actions: read
      checks: write
      id-token: write
    
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set version
      id: version
      run: |
        VERSION=$(date '+%Y%m%d.%H%M')
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "version=v$VERSION-beta" >> $GITHUB_OUTPUT
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Deployment
      id: deployment
      uses: chrnorm/deployment-action@v2
      with:
        token: ${{ github.token }}
        environment: ${{ steps.version.outputs.environment }}
        description: 'Deploying ${{ steps.version.outputs.version }}'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Prepare Release
      run: |
        chmod +x scripts/prepare-release.sh
        ./scripts/prepare-release.sh
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add Known Hosts
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        ssh-keyscan -H -p 5022 ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        chmod 644 ~/.ssh/known_hosts
        
    - name: Deploy Application
      id: deploy
      env:
        DEPLOY_ENV: ${{ steps.version.outputs.environment }}
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "DÃ©ploiement $VERSION vers $DEPLOY_ENV en cours..."
        RELEASE_FILE=$(ls releases/release-*.zip | sort -r | head -n1)
        
        # CrÃ©er le dossier de destination si nÃ©cessaire
        ssh -p 5022 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
        
        # TransfÃ©rer et dÃ©compresser l'archive
        scp -P 5022 "$RELEASE_FILE" ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/release.zip
        ssh -p 5022 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && \
          unzip -o release.zip && \
          rm release.zip && \
          mv release-*/* . && \
          rm -rf release-*"
        
        if [ $? -eq 0 ]; then
          echo "deploy_status=success" >> $GITHUB_OUTPUT
        else
          echo "deploy_status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Update Deployment Status
      if: always()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: ${{ steps.deploy.outputs.deploy_status == 'success' && 'success' || 'failure' }}
        
    - name: Create Release
      if: github.ref == 'refs/heads/main' && steps.deploy.outputs.deploy_status == 'success'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ðŸš€ Release ${{ steps.version.outputs.version }}
          
          ### DÃ©ploiement
          - Environnement: ${{ steps.version.outputs.environment }}
          - Status: ${{ steps.deploy.outputs.deploy_status }}
          
          ### Changements
          ${{ github.event.head_commit.message }}

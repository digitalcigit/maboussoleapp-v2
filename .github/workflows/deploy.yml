name: Deploy Application

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      issues: write
      pull-requests: write
      actions: read
      checks: write
      id-token: write

    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
    - name: Set version
      id: version
      run: |
        VERSION=$(date '+%Y%m%d.%H%M')
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "version=v$VERSION-beta" >> $GITHUB_OUTPUT
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Deployment
      id: deployment
      uses: chrnorm/deployment-action@v2
      with:
        token: ${{ github.token }}
        environment: ${{ steps.version.outputs.environment }}
        description: 'Deploying ${{ steps.version.outputs.version }}'

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Configure Known Hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    - name: Deploy Application
      id: deploy
      env:
        DEPLOY_ENV: ${{ steps.version.outputs.environment }}
        VERSION: ${{ steps.version.outputs.version }}
        REMOTE_USER: ${{ secrets.SERVER_USER }}
        REMOTE_HOST: ${{ secrets.SERVER_HOST }}
        REMOTE_PORT: ${{ secrets.SERVER_PORT }}
        REMOTE_BASE_DIR: ${{ secrets.DEPLOY_PATH }}
      run: |
        echo "Déploiement $VERSION vers $DEPLOY_ENV en cours..."
        
        ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "
          # Vérification des commandes requises
          command -v git >/dev/null 2>&1 || { echo 'git is required but not installed.' >&2; exit 1; }
          command -v composer >/dev/null 2>&1 || { echo 'composer is required but not installed.' >&2; exit 1; }
          command -v npm >/dev/null 2>&1 || { echo 'npm is required but not installed.' >&2; exit 1; }
          
          # Création du répertoire si nécessaire
          mkdir -p $REMOTE_BASE_DIR
          cd $REMOTE_BASE_DIR
          
          # Initialisation/mise à jour du dépôt
          if [ ! -d .git ]; then
            git init
            git remote add origin https://github.com/digitalcigit/maboussoleapp-v2.git
          fi
          
          # Récupération du code
          git fetch origin
          git checkout -f origin/\${DEPLOY_ENV}
          
          # Installation des dépendances avec PATH complet
          export PATH=/usr/local/bin:/usr/bin:$PATH
          composer install --no-dev --no-interaction --prefer-dist
          npm ci
          npm run build

          # Configuration
          if [ ! -f .env ]; then
            cp .env.example .env
            php artisan key:generate
          fi
          
          # Cache et optimisations
          php artisan optimize:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          # Migrations (seulement si la base est accessible)
          if php artisan migrate:status >/dev/null 2>&1; then
            php artisan migrate --force
          else
            echo 'Warning: Could not connect to database. Skipping migrations.'
          fi
        "

    - name: Update Deployment Status
      if: always()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        environment-url: https://crm-app.maboussole.net
        state: ${{ job.status == 'success' && 'success' || 'failure' }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}

    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Deployment failed: ${process.env.VERSION}`,
            body: `Deployment to ${process.env.DEPLOY_ENV} failed.\nPlease check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`
          });
